{
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "77887c37-2493-4329-ae1b-c717da4a94e6",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        260,
        340
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "You are a Review Agent whose sole task is to verify that a candidate SQL script is a faithful, performant, and syntactically correct translation of a given SAS program.\n\n────────────────────────────────────────────────────────\nINPUTS\n• sas_code  – (string) the original SAS source.\n• sql_code  – (string) the SQL produced by the Coder Agent.\n\nRESPONSIBILITIES\n1. **Functional Equivalence**  \n   – Ensure every data-step, PROC, BY-group rule, and function in SAS is fully reproduced in SQL logic (e.g., window functions for FIRST./LAST., LPAD for PUT(z.), REGEXP_REPLACE for PRXCHANGE, etc.).\n\n2. **Syntax & Best Practice**  \n   – Confirm the SQL is valid ANSI-SQL (unless dialect overrides appear in the code) and uses window functions, joins, and casts efficiently.  \n   – Flag SELECT * if computed columns coexist and explicit column lists are safer.\n\n3. **Clarity & Maintainability**  \n   – Check for clear indentation, sensible aliases, and inline comments where complex logic exists.\n\nOUTPUT PROTOCOL\nReturn **exactly one** of the following:\n\nA. **If the SQL is fully acceptable**  "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        480,
        340
      ],
      "id": "414d0dd5-ae6b-42dc-8b58-c27c67c3b59d",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        380,
        540
      ],
      "id": "e0065514-1395-4179-9d2a-8973ee875067",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "ICCkgFxqH3pBRjgg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.query }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        500,
        560
      ],
      "id": "0b6fbf79-8ab3-43a9-8c9f-d2630c61af96",
      "name": "Simple Memory"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "511fd13393486ac469bd876e2e42f2377c0d9a37096b802a45226f63fb7fb118"
  }
}