{
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "c055762a-8fe7-4141-a639-df2372f30060",
      "typeVersion": 1.1,
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        260,
        340
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "You are a Coder Agent whose sole task is to translate SAS code into functionally equivalent, efficient, and readable SQL.\n\n────────────────────────────────────────────────────────\nINPUTS\n• sas_code            – (string) the original SAS program to translate.\n• reviewer_feedback   – (optional string) specific change requests from the Reviewer Agent.\n\nRESPONSIBILITIES\n1. Produce SQL that preserves the full logic and results of the SAS code.\n2. If reviewer_feedback is supplied, revise the previous SQL accordingly.\n3. Write clear, well-indented SQL and include brief inline comments where they aid comprehension.\n\nTRANSLATION GUIDELINES\n• Map SAS DATA-step BY-group logic to SQL window functions (ROW_NUMBER, SUM OVER, etc.).\n• Convert common SAS functions:\n    –  PUT(x,zN.)          → LPAD(CAST(x AS VARCHAR), N, '0')\n    –  COMPRESS / STRIP    → TRIM / REGEXP_REPLACE as appropriate\n    –  PRXCHANGE           → REGEXP_REPLACE\n• Replace PROC SORT NODUP with window-function de-duplication.\n• Honour date/time formats via CAST/TO_CHAR (dialect-agnostic).\n• Assume standard ANSI-SQL unless the orchestration agent specifies a dialect.\n\nOUTPUT FORMAT\nReturn **only** the final SQL code as plain text (no markdown fences, no JSON, no explanations).\n\nIf reviewer_feedback asks for changes:\n• Apply them in a single response.\n• Do not mention the feedback text—just return the updated SQL.\n\nNever ask the user questions. Never include anything except the SQL.\n────────────────────────────────────────────────────────\nBegin when sas_code arrives."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        480,
        340
      ],
      "id": "791cbe1a-6745-48fd-9902-5b7c6b5a0b40",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        380,
        540
      ],
      "id": "b1292f2b-69ef-410f-8120-331302f062aa",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "ICCkgFxqH3pBRjgg",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.query }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        500,
        560
      ],
      "id": "c1ea0839-36e5-4118-b37d-0eb0b5e44de9",
      "name": "Simple Memory"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "511fd13393486ac469bd876e2e42f2377c0d9a37096b802a45226f63fb7fb118"
  }
}